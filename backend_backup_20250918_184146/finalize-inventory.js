const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function finalizeInventory() {
  try {
    console.log('üîß FINALIZANDO MIGRACI√ìN DEL INVENTARIO...\n');

    // MOVER PRODUCTOS DE CATEGOR√çA NULL
    console.log('üîÑ Moviendo productos de categor√≠a null...');
    
    const nullCategoryProducts = await prisma.product.findMany({
      where: { category: null }
    });

    const nullCategoryMappings = {
      'VITS': 'MEDICAMENTOS',
      'Evans': 'MEDICAMENTOS'
    };

    for (const product of nullCategoryProducts) {
      const newCategory = nullCategoryMappings[product.name];
      if (newCategory) {
        await prisma.product.update({
          where: { id: product.id },
          data: { category: newCategory }
        });
        console.log(`   ‚úÖ Movido producto: ${product.name} ‚Üí ${newCategory}`);
      } else {
        console.log(`   ‚ÑπÔ∏è  Producto sin categor√≠a mantenido: ${product.name}`);
      }
    }

    console.log('\nüéâ ¬°MIGRACI√ìN FINALIZADA EXITOSAMENTE!');
    console.log('‚úÖ Productos de categor√≠a null movidos');
    console.log('‚úÖ Sistema de inventario limpio y consistente');
    console.log('');
    console.log('üìã RESUMEN DEL SISTEMA:');
    console.log('   - ‚úÖ Duplicados eliminados');
    console.log('   - ‚úÖ Categor√≠as unificadas');
    console.log('   - ‚úÖ Stock preservado');
    console.log('   - ‚úÖ Movimientos actualizados');
    console.log('   - ‚úÖ Detalles de uso actualizados');
    console.log('   - ‚úÖ Productos de categor√≠a null movidos');
    console.log('');
    console.log('üöÄ El sistema est√° listo para funcionar correctamente');

  } catch (error) {
    console.error('‚ùå Error durante la finalizaci√≥n:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

finalizeInventory();
