// TEMPORARILY COMMENTED OUT DUE TO MISSING HISTORIAL MODELS IN SCHEMA
/*
import { prisma } from '../prisma';

interface HistorialInventarioData {
  sedeId: string;
  consultorioId: string;
  usuarioId: string;
  tipoCambio: string;
  detallesAntes: any;
  detallesDespues: any;
  ipAddress?: string;
  userAgent?: string;
}

interface HistorialCalendarioData {
  sedeId: string;
  consultorioId: string;
  usuarioId: string;
  tipoCambio: string;
  detallesAntes: any;
  detallesDespues: any;
  ipAddress?: string;
  userAgent?: string;
}

interface HistorialUsuarioData {
  sedeId: string;
  consultorioId: string;
  usuarioId: string;
  tipoCambio: string;
  detallesAntes: any;
  detallesDespues: any;
  ipAddress?: string;
  userAgent?: string;
}

export async function registrarHistorialInventario(data: HistorialInventarioData): Promise<void> {
  try {
    await prisma.historialInventario.create({
      data: {
        sedeId: data.sedeId,
        consultorioId: data.consultorioId,
        usuarioId: data.usuarioId,
        tipoCambio: data.tipoCambio,
        detallesAntes: data.detallesAntes,
        detallesDespues: data.detallesDespues,
        ipAddress: data.ipAddress,
        userAgent: data.userAgent,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  } catch (error) {
    console.error('Error registrando historial de inventario:', error);
    // No lanzar error para no interrumpir el flujo principal
  }
}

export async function registrarHistorialCalendario(data: HistorialCalendarioData): Promise<void> {
  try {
    await prisma.historialCalendario.create({
      data: {
        sedeId: data.sedeId,
        consultorioId: data.consultorioId,
        usuarioId: data.usuarioId,
        tipoCambio: data.tipoCambio,
        detallesAntes: data.detallesAntes,
        detallesDespues: data.detallesDespues,
        ipAddress: data.ipAddress,
        userAgent: data.userAgent,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  } catch (error) {
    console.error('Error registrando historial de calendario:', error);
    // No lanzar error para no interrumpir el flujo principal
  }
}

export async function registrarHistorialUsuario(data: HistorialUsuarioData): Promise<void> {
  try {
    await prisma.historialUsuario.create({
      data: {
        sedeId: data.sedeId,
        consultorioId: data.consultorioId,
        usuarioId: data.usuarioId,
        tipoCambio: data.tipoCambio,
        detallesAntes: data.detallesAntes,
        detallesDespues: data.detallesDespues,
        ipAddress: data.ipAddress,
        userAgent: data.userAgent,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    });
  } catch (error) {
    console.error('Error registrando historial de usuario:', error);
    // No lanzar error para no interrumpir el flujo principal
  }
}

export async function obtenerHistorialInventario(
  sedeId?: string,
  consultorioId?: string,
  limit = 100
): Promise<any[]> {
  try {
    const where: any = {};
    
    if (sedeId) where.sedeId = sedeId;
    if (consultorioId) where.consultorioId = consultorioId;

    return await prisma.historialInventario.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      take: limit,
      include: {
        sede: { select: { nombre: true } },
        consultorio: { select: { nombre: true } },
        usuario: { select: { nombre: true, apellido: true } }
      }
    });
  } catch (error) {
    console.error('Error obteniendo historial de inventario:', error);
    return [];
  }
}

export async function obtenerHistorialCalendario(
  sedeId?: string,
  consultorioId?: string,
  limit = 100
): Promise<any[]> {
  try {
    const where: any = {};
    
    if (sedeId) where.sedeId = sedeId;
    if (consultorioId) where.consultorioId = consultorioId;

    return await prisma.historialCalendario.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      take: limit,
      include: {
        sede: { select: { nombre: true } },
        consultorio: { select: { nombre: true } },
        usuario: { select: { nombre: true, apellido: true } }
      }
    });
  } catch (error) {
    console.error('Error obteniendo historial de calendario:', error);
    return [];
  }
}

export async function obtenerHistorialUsuario(
  sedeId?: string,
  consultorioId?: string,
  limit = 100
): Promise<any[]> {
  try {
    const where: any = {};
    
    if (sedeId) where.sedeId = sedeId;
    if (consultorioId) where.consultorioId = consultorioId;

    return await prisma.historialUsuario.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      take: limit,
      include: {
        sede: { select: { nombre: true } },
        consultorio: { select: { nombre: true } },
        usuario: { select: { nombre: true, apellido: true } }
      }
    });
  } catch (error) {
    console.error('Error obteniendo historial de usuario:', error);
    return [];
  }
}
*/
