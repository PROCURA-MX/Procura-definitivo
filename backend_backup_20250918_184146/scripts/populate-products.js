const { PrismaClient } = require('@prisma/client');
const { v4: uuidv4 } = require('uuid');

const prisma = new PrismaClient();

// Productos a insertar organizados por categor√≠a
const productsToInsert = {
  'Medicamentos': [
    'Bacmune',
    'Transfer√≥n', 
    'Diprosp√°n',
    'Nebulizaci√≥n'
  ],
  'Al√©rgenos Alxoid': [
    'Ambros√≠a A', 'Ambros√≠a B',
    '√Åcaros A', '√Åcaros B',
    'Cupressus Ariz√≥nica A', 'Cupressus Ariz√≥nica B',
    'Encino A', 'Encino B',
    'Fresno A', 'Fresno B',
    'Gato A', 'Gato B',
    'Gram√≠nea con sinodon A', 'Gram√≠nea con sinodon B',
    'Sinodon A', 'Sinodon B',
    'Perro A', 'Perro B',
    '6 Gram√≠neas A', '6 Gram√≠neas B'
  ],
  'Al√©rgenos': [
    'Abedul', '√Åcaros', '√Ålamo del este', 'Ambros√≠a', 'Caballo',
    'Camar√≥n', 'Cipr√©s de Arizona', 'Encino', 'Fresno blanco', 'Gato',
    'Manzana', 'Cucaracha', 'Mezcla pastos', 'Perro', 'Pescado varios',
    'Pino blanco', 'Pistache', 'Trueno'
  ],
  'Pruebas': [
    'Alex de alergia molecular', 'Phadiatop', 'Prick', 'Prick to Prick',
    'Pruebas con alimentos', 'Prueba de suero', 'FeNO', 'COVID/Influenza',
    'Estreptococo B', 'Influenza A y B/Sincitial/Adenovirus'
  ],
  'Gammaglobulina': [
    'Hizentra 4GR', 'Hizentra 2GR', 'TENGELINE 10% 5G/50ML',
    'TENGELINE 10G/100ML', 'HIGLOBIN 10GR'
  ],
  'Vacunas Pedi√°tricas': [
    'Adacel Boost', 'Gardasil', 'Gardasil 9', 'Hepatitis A y B',
    'Fiebre Amarilla', 'Herpes Z√≥ster', 'Hexacima', 'Influenza',
    'Menactra', 'MMR', 'Prevenar 13 V', 'Proquad', 'Pulmovax',
    'Rota Teq', 'Vaqta', 'Varivax'
  ]
};

async function populateProducts() {
  try {
    console.log('üöÄ Iniciando poblaci√≥n de productos...');
    
    let totalInserted = 0;
    let totalSkipped = 0;
    
    for (const [category, products] of Object.entries(productsToInsert)) {
      console.log(`\nüì¶ Procesando categor√≠a: ${category}`);
      
      for (const productName of products) {
        try {
          // Verificar si el producto ya existe
          const existingProduct = await prisma.product.findFirst({
            where: {
              name: productName,
              category: category
            }
          });
          
          if (existingProduct) {
            console.log(`  ‚è≠Ô∏è  Saltando: ${productName} (ya existe)`);
            totalSkipped++;
            continue;
          }
          
          // Insertar nuevo producto con todos los campos requeridos
          const newProduct = await prisma.product.create({
            data: {
              id: uuidv4(),
              name: productName,
              category: category,
              type: 'SIMPLE', // Valor correcto del enum
              unit: 'PIECE', // Valor correcto del enum
              costPerUnit: 0.00,
              minStockLevel: 0,
              updatedAt: new Date()
            }
          });
          
          console.log(`  ‚úÖ Insertado: ${productName} (ID: ${newProduct.id})`);
          totalInserted++;
          
        } catch (error) {
          console.error(`  ‚ùå Error al insertar ${productName}:`, error.message);
        }
      }
    }
    
    console.log('\nüìä RESUMEN FINAL:');
    console.log(`‚úÖ Productos insertados: ${totalInserted}`);
    console.log(`‚è≠Ô∏è  Productos saltados (ya exist√≠an): ${totalSkipped}`);
    console.log(`üì¶ Total procesados: ${totalInserted + totalSkipped}`);
    
    // Mostrar estad√≠sticas por categor√≠a
    console.log('\nüìà ESTAD√çSTICAS POR CATEGOR√çA:');
    for (const category of Object.keys(productsToInsert)) {
      const count = await prisma.product.count({
        where: { category: category }
      });
      console.log(`  ${category}: ${count} productos`);
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
populateProducts();
