# ========================================
# DOCKER COMPOSE PARA PRODUCCIÃ“N
# ========================================

version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: procura-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: procura_cobros_prod
      POSTGRES_USER: procura_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - procura-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U procura_user -d procura_cobros_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: procura-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://procura_user:${POSTGRES_PASSWORD}@postgres:5432/procura_cobros_prod
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - procura-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx)
  frontend:
    image: nginx:alpine
    container_name: procura-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - procura-network

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: procura-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - procura-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  procura-network:
    driver: bridge
