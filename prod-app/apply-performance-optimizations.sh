#!/bin/bash

# =====================================================
# SCRIPT DE OPTIMIZACI√ìN DE PERFORMANCE
# =====================================================
# Este script aplica optimizaciones SEGURAS que:
# ‚úÖ NO modifican funcionalidad existente
# ‚úÖ NO cambian datos
# ‚úÖ Solo agregan √≠ndices y optimizaciones
# ‚úÖ Son reversibles si algo sale mal
# =====================================================

echo "üöÄ Iniciando optimizaciones de performance..."
echo "üìã Verificando conexi√≥n a la base de datos..."

# Verificar que la base de datos est√© disponible
if ! command -v psql &> /dev/null; then
    echo "‚ùå Error: psql no est√° instalado"
    exit 1
fi

# Obtener la URL de la base de datos desde el archivo .env
if [ ! -f .env ]; then
    echo "‚ùå Error: Archivo .env no encontrado"
    exit 1
fi

# Extraer DATABASE_URL del archivo .env
DATABASE_URL=$(grep DATABASE_URL .env | cut -d '=' -f2- | tr -d '"')

if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå Error: DATABASE_URL no encontrado en .env"
    exit 1
fi

echo "‚úÖ Conexi√≥n a base de datos configurada"
echo "üîç Aplicando optimizaciones..."

# 1. APLICAR OPTIMIZACIONES DE √çNDICES
echo "üìä Aplicando optimizaciones de √≠ndices..."
psql "$DATABASE_URL" -f optimize-performance.sql

if [ $? -eq 0 ]; then
    echo "‚úÖ Optimizaciones de √≠ndices aplicadas correctamente"
else
    echo "‚ùå Error al aplicar optimizaciones de √≠ndices"
    exit 1
fi

# 2. APLICAR OPTIMIZACIONES DE CONFIGURACI√ìN
echo "‚öôÔ∏è Aplicando optimizaciones de configuraci√≥n..."
psql "$DATABASE_URL" -f prisma/optimize-migrations.sql

if [ $? -eq 0 ]; then
    echo "‚úÖ Optimizaciones de configuraci√≥n aplicadas correctamente"
else
    echo "‚ùå Error al aplicar optimizaciones de configuraci√≥n"
    exit 1
fi

# 3. VERIFICAR OPTIMIZACIONES
echo "üîç Verificando optimizaciones aplicadas..."

# Verificar √≠ndices creados
echo "üìã √çndices creados:"
psql "$DATABASE_URL" -c "
SELECT 
    tablename,
    COUNT(*) as indices_count
FROM pg_indexes 
WHERE schemaname = 'public'
AND indexname LIKE 'idx_%'
GROUP BY tablename
ORDER BY tablename;
"

# Verificar configuraci√≥n aplicada
echo "‚öôÔ∏è Configuraci√≥n aplicada:"
psql "$DATABASE_URL" -c "
SELECT 
    name,
    setting,
    unit
FROM pg_settings 
WHERE name IN (
    'checkpoint_timeout',
    'wal_buffers',
    'shared_buffers',
    'max_connections',
    'random_page_cost'
)
ORDER BY name;
"

echo "‚úÖ Optimizaciones completadas exitosamente!"
echo ""
echo "üìä RESUMEN DE OPTIMIZACIONES:"
echo "   ‚Ä¢ √çndices agregados para queries m√°s r√°pidas"
echo "   ‚Ä¢ Configuraci√≥n de PostgreSQL optimizada"
echo "   ‚Ä¢ Migraciones de Prisma m√°s r√°pidas"
echo ""
echo "üîÑ Para aplicar los cambios, reinicia el servidor:"
echo "   npm run dev"
echo ""
echo "üìà Resultados esperados:"
echo "   ‚Ä¢ Queries de cobros: 1.6s ‚Üí ~200ms"
echo "   ‚Ä¢ Migraciones Prisma: 1.3s ‚Üí ~500ms"
echo "   ‚Ä¢ Mejor performance general"
