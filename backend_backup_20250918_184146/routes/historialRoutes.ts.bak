// TEMPORARILY COMMENTED OUT DUE TO MISSING HISTORIAL MODELS IN SCHEMA
/*
import express from 'express';
import { prisma } from '../prisma';
import { asyncHandler } from '../middleware/asyncHandler';

const router = express.Router();

// GET /api/historial/overview
router.get('/overview', asyncHandler(async (req, res) => {
  try {
    const totalInventario = await prisma.historialInventario.count();
    const totalCalendario = await prisma.historialCalendario.count();
    const totalUsuarios = await prisma.historialUsuario.count();

    res.json({
      success: true,
      data: {
        totalInventario,
        totalCalendario,
        totalUsuarios
      }
    });
  } catch (error) {
    console.error('Error getting historial overview:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
}));

// GET /api/historial/inventario
router.get('/inventario', asyncHandler(async (req, res) => {
  try {
    const { page = 1, limit = 50, startDate, endDate, type } = req.query;
    const pageNum = parseInt(page as string);
    const limitNum = parseInt(limit as string);
    const offset = (pageNum - 1) * limitNum;

    const where: any = {};
    
    if (startDate && endDate) {
      where.createdAt = {
        gte: new Date(startDate as string),
        lte: new Date(endDate as string)
      };
    }
    
    if (type) {
      where.type = type;
    }

    const historial = await prisma.historialInventario.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      skip: offset,
      take: limitNum,
      include: {
        sede: {
          select: {
            id: true,
            nombre: true
          }
        },
        consultorio: {
          select: {
            id: true,
            nombre: true
          }
        }
      }
    });

    const total = await prisma.historialInventario.count({ where });

    res.json({
      success: true,
      data: {
        historial,
        pagination: {
          page: pageNum,
          limit: limitNum,
          total,
          pages: Math.ceil(total / limitNum)
        }
      }
    });
  } catch (error) {
    console.error('Error getting inventario historial:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
}));

// GET /api/historial/calendario
router.get('/calendario', asyncHandler(async (req, res) => {
  try {
    const { page = 1, limit = 50, startDate, endDate, type } = req.query;
    const pageNum = parseInt(page as string);
    const limitNum = parseInt(limit as string);
    const offset = (pageNum - 1) * limitNum;

    const where: any = {};
    
    if (startDate && endDate) {
      where.createdAt = {
        gte: new Date(startDate as string),
        lte: new Date(endDate as string)
      };
    }
    
    if (type) {
      where.type = type;
    }

    const historial = await prisma.historialCalendario.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      skip: offset,
      take: limitNum,
      include: {
        sede: {
          select: {
            id: true,
            nombre: true
          }
        },
        consultorio: {
          select: {
            id: true,
            nombre: true
          }
        }
      }
    });

    const total = await prisma.historialCalendario.count({ where });

    res.json({
      success: true,
      data: {
        historial,
        pagination: {
          page: pageNum,
          limit: limitNum,
          total,
          pages: Math.ceil(total / limitNum)
        }
      }
    });
  } catch (error) {
    console.error('Error getting calendario historial:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
}));

// GET /api/historial/usuarios
router.get('/usuarios', asyncHandler(async (req, res) => {
  try {
    const { page = 1, limit = 50, startDate, endDate, type } = req.query;
    const pageNum = parseInt(page as string);
    const limitNum = parseInt(limit as string);
    const offset = (pageNum - 1) * limitNum;

    const where: any = {};
    
    if (startDate && endDate) {
      where.createdAt = {
        gte: new Date(startDate as string),
        lte: new Date(endDate as string)
      };
    }
    
    if (type) {
      where.type = type;
    }

    const historial = await prisma.historialUsuario.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      skip: offset,
      take: limitNum,
      include: {
        sede: {
          select: {
            id: true,
            nombre: true
          }
        },
        consultorio: {
          select: {
            id: true,
            nombre: true
          }
        }
      }
    });

    const total = await prisma.historialUsuario.count({ where });

    res.json({
      success: true,
      data: {
        historial,
        pagination: {
          page: pageNum,
          limit: limitNum,
          total,
          pages: Math.ceil(total / limitNum)
        }
      }
    });
  } catch (error) {
    console.error('Error getting usuarios historial:', error);
    res.status(500).json({
      success: false,
      error: 'Error interno del servidor'
    });
  }
}));

export default router;
*/
