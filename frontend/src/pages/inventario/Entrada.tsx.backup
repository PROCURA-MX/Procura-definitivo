'use client'

import InventoryEntryForm from '@/components/inventario/inventory-entry/InventoryEntryForm'
import { CollapsibleDateFilter } from '@/components/inventario/CollapsibleDateFilter'
import { useEffect, useState, useCallback } from 'react'
import { Button } from '@/components/inventario/ui/button'
import { useNavigate } from 'react-router-dom'
import axios from 'axios'
import '../../services/conceptosService' // Importar para aplicar interceptores
import { CategoryDetailModal } from '@/components/inventario/CategoryDetailModal'
import { useCategoryDetailModal } from '@/components/inventario/useCategoryDetailModal'
import { usePersistentDateFilter } from '@/hooks/usePersistentDateFilter'
import { getCurrentUserSedeId } from '@/utils/sedeMapping'
import { DataFilterIndicator } from '@/components/inventario/DataFilterIndicator'
import { useConsultorioContext } from '@/contexts/ConsultorioContext'
import { useConsultorioSedeMapping } from '@/hooks/useConsultorioSedeMapping'

interface EntryByCategory {
  category: string
  totalQuantity: number
  totalValue: number
  entries: { name: string; quantity: number; totalValue: number; createdAt: string }[]
}

export default function InventoryEntryPage() {
  // Obtener el consultorio seleccionado del contexto
  const { selectedConsultorioId } = useConsultorioContext()
  
  // Mapear consultorioId a sedeId usando el hook dinámico
  const { getSedeIdFromConsultorio, getSedeName } = useConsultorioSedeMapping()
  
  const sedeId = getSedeIdFromConsultorio(selectedConsultorioId || 'todos')
  
  // Obtener el primer y último día del mes actual
  const getCurrentMonthRange = () => {
    const now = new Date()
    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1)
    const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0)
    
    return {
      from: firstDay.toISOString().split('T')[0], // YYYY-MM-DD
      to: lastDay.toISOString().split('T')[0]     // YYYY-MM-DD
    }
  }
  
  const { from, to, hasActiveFilter } = usePersistentDateFilter(sedeId)
  const [entriesByCategory, setEntriesByCategory] = useState<EntryByCategory[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [showForm, setShowForm] = useState(false)
  const navigate = useNavigate()
  
  // Hook para el modal de detalles
  const modal = useCategoryDetailModal()

  useEffect(() => {
    async function fetchEntries() {
      if (!from || !to) return
      
      setLoading(true)
      setError(null)
      try {
        let url: string
        
        if (selectedConsultorioId === 'todos') {
          // Para "todos los consultorios", usar un parámetro especial
          url = `/api/inventory/inventory-entry/by-category?allConsultorios=true&from=${from}&to=${to}`
        } else {
          // Para consultorio específico
          url = `/api/inventory/inventory-entry/by-category?sedeId=${sedeId}&from=${from}&to=${to}`
        }
        
        const res = await axios.get(url, {
          timeout: 2000 // Reducido a 2 segundos para tablas más rápidas
        })
        
        console.log('🔍 Frontend - Datos recibidos del backend:', res.data)
        console.log('🔍 Frontend - Tipo de datos:', typeof res.data)
        console.log('🔍 Frontend - Es array:', Array.isArray(res.data))
        console.log('🔍 Frontend - Longitud:', Array.isArray(res.data) ? res.data.length : 'No es array')
        
        // 🔍 DEBUG: Buscar específicamente Alheña en los datos recibidos
        if (Array.isArray(res.data)) {
          const alergenosCategory = res.data.find(cat => cat.category === 'Alérgenos')
          if (alergenosCategory && alergenosCategory.entries) {
            const alheñaEntry = alergenosCategory.entries.find(entry => entry.name === 'Alheña')
            if (alheñaEntry) {
              console.log('🔍 DEBUG - Alheña encontrada en frontend:', alheñaEntry)
            }
          }
        }
        
        setEntriesByCategory(res.data)
      } catch (err: any) {
        setError(err.message)
      } finally {
        setLoading(false)
      }
    }
    fetchEntries()
  }, [sedeId, from, to, hasActiveFilter, selectedConsultorioId])

  // Función para cargar detalles de una categoría
  const handleCategoryClick = useCallback(async (category: string, totalQuantity: number, totalValue: number) => {
    try {
      let url: string
      
      // 🚀 SOLUCIÓN DEFINITIVA: Usar endpoint de STOCK ACTUAL, no movimientos
      if (selectedConsultorioId === 'todos') {
        url = `/api/inventory/stock/by-category?category=${encodeURIComponent(category)}&allConsultorios=true`
      } else {
        // Para consultorio específico, usar el mismo sedeId que usa la tabla principal
        const consultorioSedeId = getSedeIdFromConsultorio(selectedConsultorioId || '')
        url = `/api/inventory/stock/by-category?category=${encodeURIComponent(category)}&sedeId=${consultorioSedeId}`
      }
      
      const response = await axios.get(url)
      modal.openModal(category, response.data, 'ENTRY', totalQuantity, totalValue)
    } catch (error) {
      console.error('Error al cargar detalles de la categoría:', error)
    }
  }, [sedeId, from, to, modal, selectedConsultorioId])

  return (
    <div className="max-w-7xl mx-auto w-full px-4 md:px-8 py-8">
      {/* Botón de regreso */}
      <div className="mb-4">
        <Button
          onClick={() => navigate('/inventario')}
          variant="outline"
          className="gap-2 text-base font-medium"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" d="M15 19l-7-7 7-7" /></svg>
          Regresar
        </Button>
      </div>
      
      {/* Header con título y filtros */}
      <div className="mb-8">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-12 h-12 bg-green-100 rounded-2xl flex items-center justify-center">
            <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
          </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Registrar Entrada de Inventario</h1>
            <p className="text-gray-600">Agregar nuevos productos al inventario clínico</p>
          </div>
        </div>
        
        {/* Filtro de fechas colapsible */}
        <CollapsibleDateFilter basePath="/inventario/Entrada" sedeId={sedeId} />
        {hasActiveFilter && (
          <DataFilterIndicator
            hasDateFilter={hasActiveFilter}
            dateRange={`${from} a ${to}`}
            isCurrentData={false}
            className="mt-4"
          />
        )}
      </div>
      
      {/* Resumen de entradas por categoría */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold text-gray-800 mb-4">Detalle de Entradas por Categoría</h2>
        {loading && <div className="text-gray-500">Cargando...</div>}
        {error && <div className="text-red-500">{error}</div>}
        {!loading && !error && entriesByCategory.length === 0 && (
          <div className="text-gray-500">No hay entradas registradas en este periodo.</div>
        )}
        {!loading && !error && entriesByCategory.length > 0 && (
          <div className="space-y-8">
            {entriesByCategory.map((cat, i) => (
              <div 
                key={`${cat.category}-${i}`} 
                className="bg-white rounded-xl shadow p-6 hover:shadow-lg transition-all duration-200 cursor-pointer border-2 border-transparent hover:border-green-200"
                onClick={() => handleCategoryClick(cat.category, cat.totalQuantity, cat.totalValue)}
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold text-green-800">{cat.category}</h3>
                  <div className="flex gap-4 text-sm">
                    <span className="text-gray-600">Total cantidad: <span className="text-green-700 font-semibold">{Number(cat.totalQuantity).toFixed(2)}</span></span>
                    <span className="text-gray-600">Total valor: <span className="text-green-700 font-semibold">${typeof cat.totalValue === 'number' ? cat.totalValue.toLocaleString('es-MX', { minimumFractionDigits: 2 }) : '0.00'}</span></span>
                  </div>
                </div>
                <table className="w-full text-base">
                  <thead>
                    <tr className="border-b">
                      <th className="py-2 text-left text-gray-900">Producto</th>
                      <th className="py-2 text-right text-gray-900">Cantidad</th>
                      <th className="py-2 text-right text-gray-900">Valor Unitario</th>
                      <th className="py-2 text-right text-gray-900">Valor</th>
                      <th className="py-2 text-center text-gray-900">Consultorio</th>
                      <th className="py-2 text-right text-gray-900">Fecha de Entrada</th>
                    </tr>
                  </thead>
                  <tbody>
                    {(Array.isArray(cat.entries) ? cat.entries : []).map((entry, j) => {
                      // 🔍 DEBUG: Log para verificar los datos
                      if (entry.name === 'Manzana' || entry.name === 'Cupressus Arizónica B' || entry.name === 'Bacteriana') {
                        console.log('🔍 DEBUG - Entry recibida en frontend:', {
                          name: entry.name,
                          quantity: entry.quantity,
                          totalValue: entry.totalValue,
                          unitCost: entry.unitCost
                        });
                      }
                      return (
                        <tr key={j} className="border-b last:border-0">
                          <td className="py-2 font-medium text-gray-900">{entry.name}</td>
                          <td className="py-2 text-right text-gray-900">{Number(entry.quantity).toFixed(2)}</td>
                          <td className="py-2 text-right text-gray-900">{entry.quantity && entry.totalValue ? `$${(entry.totalValue / entry.quantity).toLocaleString('es-MX', { minimumFractionDigits: 2 })}` : '-'}</td>
                          <td className="py-2 text-right text-gray-900">
                            {(() => {
                              const value = typeof entry.totalValue === 'number' ? entry.totalValue : 0;
                              console.log('🔍 DEBUG - Mostrando valor para', entry.name, ':', value);
                              return `$${value.toLocaleString('es-MX', { minimumFractionDigits: 2 })}`;
                            })()}
                          </td>
                          <td className="py-2 text-center text-gray-900">
                            {entry.sedeId ? getSedeName(entry.sedeId) : 'Sin consultorio'}
                          </td>
                          <td className="py-2 text-right text-gray-900">
                            {entry.createdAt ? (
                              <div>
                                <div>{new Date(entry.createdAt).toLocaleDateString('es-MX')}</div>
                                <div className="text-xs text-gray-500">
                                  {new Date(entry.createdAt).toLocaleTimeString('es-MX', { 
                                    hour: '2-digit', 
                                    minute: '2-digit',
                                    hour12: true 
                                  })}
                                </div>
                              </div>
                            ) : ''}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <p className="text-sm text-gray-600 text-center">
                    👆 Haz clic para ver detalles completos con filtros avanzados
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* Botón para mostrar el formulario */}
      <div className="mb-8 flex justify-center">
        {!showForm && (
          <Button onClick={() => setShowForm(true)} className="px-6 py-3 text-lg font-semibold bg-green-600 hover:bg-green-700 text-white rounded-xl shadow">
            Registrar Entrada de Inventario
          </Button>
        )}
      </div>

      {/* Formulario y panel lateral solo si showForm es true */}
      {showForm && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Formulario principal */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
              <div className="mb-6">
                <h2 className="text-xl font-semibold text-gray-900 mb-2">Información del Producto</h2>
                <p className="text-gray-600">Completa los datos del producto que deseas agregar</p>
              </div>
              <InventoryEntryForm />
            </div>
          </div>
          
          {/* Panel lateral con información útil */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Información Útil</h3>
              <div className="space-y-4">
                <div className="p-4 bg-blue-50 rounded-xl border border-blue-200">
                  <h4 className="font-medium text-blue-900 mb-2">📋 Categorías Disponibles</h4>
                  <ul className="text-sm text-blue-800 space-y-1">
                    <li>• Alérgenos Alxoid</li>
                    <li>• Alérgenos</li>
                    <li>• Vacunas Pediátricas</li>
                    <li>• Medicamentos</li>
                    <li>• Gammaglobulina</li>
                  </ul>
                </div>
                
                <div className="p-4 bg-green-50 rounded-xl border border-green-200">
                  <h4 className="font-medium text-green-900 mb-2">✅ Consejos</h4>
                  <ul className="text-sm text-green-800 space-y-1">
                    <li>• Verifica la fecha de caducidad</li>
                    <li>• Revisa el lote del producto</li>
                    <li>• Confirma el precio unitario</li>
                  </ul>
                </div>
                
                <div className="p-4 bg-orange-50 rounded-xl border border-orange-200">
                  <h4 className="font-medium text-orange-900 mb-2">⚠️ Importante</h4>
                  <p className="text-sm text-orange-800">
                    Los productos Alxoid requieren especificar ml por vial para el cálculo correcto de la cantidad.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Modal de detalles de categoría */}
      <CategoryDetailModal
        open={modal.open}
        onClose={modal.closeModal}
        category={modal.category || ''}
        movements={modal.movements}
        type={modal.type}
        totalQuantity={modal.totalQuantity}
        totalValue={modal.totalValue}
        loading={modal.loading}
      />
    </div>
  )
} 